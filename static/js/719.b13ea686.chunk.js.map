{"version":3,"file":"static/js/719.b13ea686.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 10px;\n  width: 320px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n\n  button {\n    margin-right: 125px;\n  }\n`;\n\nexport const Field = styled(FormikField)`\n  display: block;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 20px;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 14px;\n  font-family: 'Roboto', sans-serif;\n  color: tomato;\n`;\n","import { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'redux/Contacts/contactsOperations';\nimport { Form, Field, Label } from 'components/ContactForm/ContactForm.styled';\nimport { ErrorMessage } from 'components/ContactForm/ContactForm.styled';\nimport { selectContacts } from 'redux/seletors';\n\nconst ContactSchema = object().shape({\n  name: string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces'\n    )\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Required'),\n  number: string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .min(5, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onSubmit = (values, actions) => {\n    const isInContacts = contacts.some(\n      el => el.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isInContacts) {\n      return alert(`${values.name} is already in contacts!`);\n    }\n\n    dispatch(addContactThunk(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={onSubmit}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 20px 0;\n  display: inline-flex;\n  flex-direction: column;\n  counter-reset: section;\n\n  /* counter-reset: section; */\n  /* list-style-type: none; */\n\n  li {\n    margin-bottom: 10px;\n    display: inline-flex;\n    gap: 5px;\n\n    &::before {\n      counter-increment: section;\n      content: counters(section, '.') '.';\n    }\n\n    button {\n      margin-left: auto;\n      padding: 0 20px;\n    }\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilterValue } from 'redux/seletors';\nimport { List } from './ContactList.styled';\nimport { fetchContactsThunk } from 'redux/Contacts/contactsOperations';\nimport { deleteContactThunk } from 'redux/Contacts/contactsOperations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilterValue);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  const filtredContacts = contacts.filter(el =>\n    el.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n\n  return (\n    <List>\n      {filtredContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button onClick={() => dispatch(deleteContactThunk(contact.id))}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  input {\n    margin: 10px 0;\n    display: block;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 0 43px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/seletors';\nimport { setFilterValue } from 'redux/Contacts/filterSlice';\nimport { Label, Button } from './Filter.styled';\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n  const handleSearch = e => dispatch(setFilterValue(e.target.value));\n\n  return (\n    <>\n      <Label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterValue}\n          onChange={handleSearch}\n        />\n      </Label>\n      <Button onClick={handleSearch}>New search</Button>\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { OvalLoader } from 'components/Loader/OvalLoader';\n\nimport { Section } from 'components/Section/Section';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectIsLoading } from 'redux/seletors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Section mainTitle={'Contacts'}>\n        <Filter /> <br />\n        <ContactList />\n      </Section>\n\n      <Section title={'Phonebook'}>\n        <ContactForm />\n      </Section>\n\n      {isLoading && <OvalLoader />}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","Field","FormikField","Label","ErrorMessage","FormikError","ContactSchema","object","shape","name","string","matches","min","max","required","number","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","values","actions","some","el","toLowerCase","alert","addContactThunk","resetForm","type","component","List","ContactList","filterValue","selectFilterValue","useEffect","fetchContactsThunk","filtredContacts","filter","includes","map","contact","onClick","deleteContactThunk","id","Button","Filter","handleSearch","e","setFilterValue","target","value","onChange","isLoading","selectIsLoading","style","display","justifyContent","Section","mainTitle","title","OvalLoader"],"sourceRoot":""}